if phone_login == False :
            email=req_data['email'] or None
            password=req_data['password'] or None
            user = Users.query.filter_by(email=email).first()
            if user : 
                if user.verified_email == True:
                    if user.verify_password(password):
                        token = jwt.encode({
                            'user': user.username,
                            'uuid': user.uuid,
                            'iat': datetime.utcnow()
                        },
                        app.config.get('SECRET_KEY'),
                        algorithm='HS256')
                        string_token = str(token)
                        return {
                            'status': 1,
                            'res': 'success',
                            'token': string_token
                        }, 200

                
                    else:
                        if user.tries < count:
                            user.tries +=1
                            db.session.commit()
                            return {'res': 'Your Password is wrong '}, 401
                        if user.tries >= count:
                            user.verified_email=False
                            db.session.commit()
                            return {'res': 'Reset your Password '}, 401
                else:
                    return {'status': 4,'res': 'user is  not verified'}, 401

            else:
                return {'res': 'User does not exist '}, 401


    
@login.doc(
    params={
            },

    responses={
        200: 'ok',
        201: 'created',
        204: 'No Content',
        301: 'Resource was moved',
        304: 'Resource was not Modified',
        400: 'Bad Request to server',
        401: 'Unauthorized request from client to server',
        403: 'Forbidden request from client to server',
        404: 'Resource Not found',
        500: 'internal server error, please contact admin and report issue'
    })
@login.route('/auth/check_reset')
class _check_reset(Resource):
    @login.expect(schema.check_pass)
    def post(self):
        req_data = request.get_json()
        email=req_data['email']
        password=req_data['password']
        #code=req_data['code']
        check_email =Users.query.filter_by(email=email).first()
        if check_email:#.code == int(code):
            check_email.passwordhash(password)
            check_email.tries = 0
            user.verified_email=True
            db.session.commit()
            return{
                    'status':1,
                    'res':'code has been reset',
                    
                },200
        else:
            return{
                    'status':0,
                    'res':'code is not same',
                    
                },400

@login.doc(
    params={
            },

    responses={
        200: 'ok',
        201: 'created',
        204: 'No Content',
        301: 'Resource was moved',
        304: 'Resource was not Modified',
        400: 'Bad Request to server',
        401: 'Unauthorized request from client to server',
        403: 'Forbidden request from client to server',
        404: 'Resource Not found',
        500: 'internal server error, please contact admin and report issue'
    })
@login.route('/auth/checkresetcode')
class _check_reset(Resource):
    @login.expect(schema.check_code)
    def post(self):
        req_data = request.get_json()
        email=req_data['email']
        code=req_data['code']
        check_email =Users.query.filter_by(email=email).first()
        if check_email.code == int(code) and not (datetime.utcnow() > check_email.code_expires_in):
            check_email.tries = 0
            user.verified_email=True
            db.session.commit()
            return{
                    'status':1,
                    'res':'code has been reset',
                    
                },200
        else:
            return{
                    'status':0,
                    'res':'code is not same or expired',
                    
                },400



if email and username and password and phone_number is not None:
                user = Users.query.filter_by(email=email).first()
                if user:
                    return { 
                        'res':'user already exist',
                        'status': 0
                    }, 200
                else:
                    verification_code=phone.generate_code()
                    newuser = Users(user_name,str(uuid.uuid4()),False, email,phone_number)
                    db.session.commit()
                    newuser.code = verification_code
                    newuser.passwordhash(password)
                    newuser.code_expires_in = datetime.utcnow() + timedelta(minutes=2)
                    db.session.commit()
                    phone.send_confirmation_code(phone_number,verification_code)
                    mail.send_email(app,[signup_data['email']],verification_code) #check this
                    return {
                        'status': 1,
                        'user_name':user_name,
                        'email':email,
                        'Phone':phone_number,
                        'res': 'verification sms  and email sent'
                        }, 200


if email and username and password is not None:
                user = Users.query.filter_by(email=email).first() #filter by user handle
            
                if user :
                    if user.verified_email == False:
                        verification_code = phone.generate_code()
                        user.code_expires_in = datetime.utcnow() + timedelta(minutes=2)
                        user.code = verification_code
                        mail.send_email(app,[user.email],verification_code)
                        return { 
                            'res':'user already exist,verification code sent',
                            'status': 0
                        }, 200
                    else:
                        return { 
                            'res':'user already exist',
                            'status': 3
                        }, 200
                else:
                    verification_code = phone.generate_code()

                    if verification_code:
                        newuser = Users(username,str(uuid.uuid4()),True, signup_data['email'])
                        newuser.code = verification_code
                        newuser.passwordhash(password)
                        newuser.code_expires_in = datetime.utcnow() + timedelta(minutes=2)
                        db.session.add(newuser)
                        db.session.commit()
                        #send code to email
                        mail.send_email(app,[signup_data['email']],verification_code) #check this
                        return {
                            'res': 'success',
                            'user_name':username,
                            'email': signup_data['email'],
                            'status': 1
                        }, 200
                    else:
                        return {
                            'status': 0,
                            'res':'error'
                        }, 201



@login.doc(
    params={
            },

    responses={
        200: 'ok',
        201: 'created',
        204: 'No Content',
        301: 'Resource was moved',
        304: 'Resource was not Modified',
        400: 'Bad Request to server',
        401: 'Unauthorized request from client to server',
        403: 'Forbidden request from client to server',
        404: 'Resource Not found',
        500: 'internal server error, please contact admin and report issue'
    })
@login.route('/auth/reset_code')
class _reset_code(Resource):
    @login.expect(schema.reset_pass)
    def post(self):
        req_data = request.get_json()
        email=req_data['email']
        phone_num=req_data['number']
        email1 =Users.query.filter_by(email=email).first()
        phon=Users.query.filter_by(phone=phone_num).first()
        code_sent=int(phone.generate_code())
        regex1 = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
        regex2 = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w+$'
        if re.search(regex1,str(email)) or re.search(regex2,str(email)):
                email1.code=code_sent
                email1.code_expires_in = datetime.utcnow() + timedelta(minutes=2)
                db.session.commit()
                mail.send_email(app,[email1.email],code_sent)
                return{
                        'status':1,
                        'res':'Mail sent',
                        
                    },200
        if  phon:
            phone.send_confirmation_code(phone_num)
            return{
                    'status':1,
                    'res':'Phone_code sent',
                        
                    },200
        else:
            return{
                    "status":0,
                    "res":"Fail"
                },400